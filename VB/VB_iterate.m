function   [pstatesTimePols,    ...
            neuralpolicies,     ...
            neuralpredictions,  ...
            FreeEnergy]            = VB_iterate(pstatesTimePols,    ...
                                                neuralpolicies,     ...
                                                neuralpredictions,  ...
                                                t,                  ...
                                                TimeHorizon,        ...
                                                Likelihood,         ...
                                                iNp,                ...
                                                Vset,               ...
                                                Dmatrix,            ...
                                                MDP)
% function [pstatesTimePols,   ...
%           neuralpolicies,    ...
%           neuralpredictions, ...
%           FreeEnergy]            = VB_iterate(pstatesTimePols,    ...
%                                               neuralpolicies,     ...
%                                               neuralpredictions,  ...
%                                               t,                  ...
%                                               TimeHorizon,        ...
%                                               Likelihood,         ...
%                                               iNp,                ...
%                                               Vset,               ...
%                                               Dmatrix,            ...
%                                               MDP)
dF              =1;
NstateFactors   = length(pstatesTimePols);
Nstates         = nan(1,NstateFactors);
for is=1:NstateFactors
    Nstates(is)=size(pstatesTimePols{is},1);
end
current_pStates2=cell(1,NstateFactors);
Bmatrix = MDP.B;
% Vset    = MDP.V;
% Dmatrix = MDP.D;
tau     = MDP.tau;
VBNi    = MDP.VBNi;
for iVB = 1:VBNi                % iterate belief updates
    FreeEnergy  = 0;            % reset free energy for this policy
    for iTH = 1:TimeHorizon     % loop over future time points             
        %--------------------------------------------------
        for istatef = 1:NstateFactors
            % marginal likelihood over outcome factors (qL)
            %------------------------------------------
            qL = zeros(Nstates(istatef),1);
            if iTH <= t
                for is = 1:NstateFactors
                    current_pStates2{is} = full(pstatesTimePols{is}(:,iTH,iNp));
                end
                qL = spm_dot(Likelihood{iTH},current_pStates2,istatef);
                qL = spm_log(qL(:));
            end

            [dFE,sx,v]=VB_compute(NstateFactors,...
                                  iVB,            ...
                                  TimeHorizon,    ...
                                  pstatesTimePols{istatef}(:,:,iNp), ... pstatesTimePols{istatef}(:,iTH,iNp),... %sx
                                  Vset(:,iNp,istatef),...
                                  tau,...
                                  t,...  %Rlook
                                  dF,...
                                  qL,...
                                  Dmatrix{istatef}, ...
                                  iTH,...
                                  Bmatrix{istatef});
            FreeEnergy = FreeEnergy + dFE;            
            % store update neuronal activity
            %----------------------------------------------
            pstatesTimePols{istatef}(:,iTH,iNp)         = sx; 
            neuralpolicies{istatef}(iVB,:,iTH,t,iNp)    = sx;
            neuralpredictions{istatef}(iVB,:,iTH,t,iNp) = v;
        end
    end
    % convergence
    %------------------------------------------------------
    if iVB > 1
        dF = FreeEnergy - oldFE;
    end
    oldFE = FreeEnergy;           
end